
import os

#I want the minimum and maximum values for each feature
, volatile_acidity, citric_acid, residual_sugar, chlorides, free_sulfur_dioxide, total_sulfur_dioxide, density, pH, sulphates, alcohol,type

def generate_wine(quality, fixed_acidity_avg, fixed_acidity_std, volatile_acidity_avg, volatile_acidity_std, 
                    citric_acid_avg, citric_acid_std, residual_sugar_avg, residual_sugar_std, chlorides_avg, chlorides_std,
                    free_sulfur_dioxide_avg, free_sulfur_dioxide_std, total_sulfur_dioxide_avg, total_sulfur_dioxide_std,
                    density_avg, density_std, pH_avg, pH_std, sulphates_avg, sulphates_std, alcohol_avg, alcohol_std,
                    type):
    """
    Returns a single wine type as a single row in a DataFrame
    """
    import pandas as pd
    import random
    
    df = pd.DataFrame({"fixed_acidity": [random.normalvariate(fixed_acidity_avg, fixed_acidity_std)], "volatile_acidity": [random.normalvariate(volatile_acidity_avg, volatile_acidity_std)], "citric_acid": [random.normalvariate(citric_acid_avg, citric_acid_std)], "residual_sugar": [random.normalvariate(residual_sugar_avg, residual_sugar_std)], "chlorides": [random.normalvariate(chlorides_avg, chlorides_std)], "free_sulfur_dioxide": [random.normalvariate(free_sulfur_dioxide_avg, free_sulfur_dioxide_std)], "total_sulfur_dioxide": [random.normalvariate(total_sulfur_dioxide_avg, total_sulfur_dioxide_std)], "density": [random.normalvariate(density_avg, density_std)], "pH": [random.normalvariate(pH_avg, pH_std)], "sulphates": [random.normalvariate(sulphates_avg, sulphates_std)], "alcohol": [random.normalvariate(alcohol_avg, alcohol_std)], "type": [type]})
    
    df['quality'] = quality
    return df

def get_random_wine():
    """
    Returns a DataFrame containing one random wine
    """
    import pandas as pd
    import 
    
    3 ,7.8533333333333335 , 1.747852541190797 ,0.517 , 0.34191297541716764 ,0.281 , 0.1735104091084034 ,5.14 , 4.730721312646839 ,0.07703333333333333 , 0.06201361548681972 ,39.21666666666667 , 59.99032728545571 ,122.03333333333333 , 112.141761679776 ,0.9957440000000002 , 0.002832544366149779 ,3.2576666666666667 , 0.21324558180867312 ,0.5063333333333333 , 0.12699398121315755 ,10.215 , 1.1064972692675532 ,0.3333333333333333 , 0.4794633014853841 ,

4 ,7.28888888888889 , 1.2648252629262409 ,0.45796296296296296 , 0.229311443580039 ,0.27231481481481484 , 0.1820789835335663 ,4.153703703703704 , 3.8121360898601364 ,0.06005555555555556 , 0.047067755878210854 ,20.636574074074073 , 18.86552424271923 ,103.43287037037037 , 61.282714153733714 ,0.9948326388888888 , 0.0024745991414475044 ,3.2316203703703708 , 0.1883901551564258 ,0.5056481481481482 , 0.16443432645735784 ,10.180092592592594 , 0.9859227719841794 ,0.24537037037037038 , 0.431306130801359 ,

5 ,7.326800748362955 , 1.2600015072891733 ,0.38961412535079515 , 0.17858167965809382 ,0.3077221702525725 , 0.1604287758604 ,5.804115996258186 , 4.994311166114325 ,0.06466604303086997 , 0.042007082957385825 ,30.237371375116933 , 18.565479158664193 ,120.83910196445277 , 60.78285934544867 ,0.9958489873713752 , 0.0024394843932946625 ,3.2121889616463983 , 0.1573775428594817 ,0.5264031805425631 , 0.1416475693634913 ,9.837782974742751 , 0.81441599727179 ,0.3185219831618335 , 0.4660121290086235 ,

6 ,7.177256699576867 , 1.2911908913310743 ,0.31386283497884343 , 0.1470795147131522 ,0.32358251057827925 , 0.1425004739526444 ,5.549753173483779 , 4.888236963287396 ,0.05415726375176304 , 0.03084333663194424 ,31.165021156558534 , 16.835507430442046 ,115.4107898448519 , 55.4543902070734 ,0.9945583409732018 , 0.0030350286337209043 ,3.2177256699576873 , 0.16100043332642625 ,0.532549365303244 , 0.14674080388019736 ,10.587552891396333 , 1.1264912698178196 ,0.22496473906911144 , 0.4176327409818374 ,

7 ,7.128962001853568 , 1.3721411289570693 ,0.28879981464318816 , 0.11679676765660317 ,0.3347636700648749 , 0.11147066610760699 ,4.731696014828545 , 4.040244669694552 ,0.04527247451343837 , 0.02178619102082276 ,30.42215013901761 , 14.925260945676856 ,108.49860982391102 , 47.943716498446676 ,0.9931259128822985 , 0.0030204743321073342 ,3.2280722891566267 , 0.1596459160677501 ,0.5470250231696014 , 0.16043641295373223 ,11.386005560704357 , 1.1993372712881645 ,0.18443002780352177 , 0.38801433573718486 ,

8 ,6.835233160621762 , 1.1472349333192304 ,0.29101036269430053 , 0.11935652080519914 ,0.332538860103627 , 0.10244551292000967 ,5.382901554404145 , 4.175466899497547 ,0.04112435233160622 , 0.015693519021936494 ,34.53367875647668 , 17.195268106384145 ,117.51813471502591 , 42.1352414929505 ,0.9925135233160621 , 0.0028803913255416535 ,3.2232124352331604 , 0.15742406056432284 ,0.5124870466321243 , 0.16589100050963088 ,11.678756476683938 , 1.2789214644623499 ,0.09326424870466321 , 0.2915587019520046 ,

9 ,7.42 , 0.9833615815151616 ,0.298 , 0.05761944116355173 ,0.386 , 0.08203657720797473 ,4.119999999999999 , 3.7592552453910337 ,0.0274 , 0.007436396977031284 ,33.4 , 13.427583550289306 ,116.0 , 19.82422760159901 ,0.99146 , 0.003118372973202526 ,3.308 , 0.08288546314040844 ,0.466 , 0.09262828941527529 ,12.18 , 1.0134100848126586 ,0.0 , 0.0 ,


    quality_3_1 = generate_wine(3, 7.8533333333333335, 1.747852541190797, 0.517, 0.34191297541716764, 0.281, 0.1735104091084034, 5.14, 4.730721312646839, 0.07703333333333333, 0.06201361548681972, 39.21666666666667, 59.99032728545571, 122.03333333333333, 112.141761679776, 0.9957440000000002, 0.002832544366149779, 3.2576666666666667, 0.21324558180867312, 0.5063333333333333, 0.12699398121315755, 10.215, 1.1064972692675532, 0.3333333333333333, 0.4794633014853841, 0)
    versicolor_df = generate_flower("Versicolor", 7.5, 4.5, 3.5, 2.1, 3.1, 5.5, 1.8, 1.0)
    setosa_df =  generate_flower("Setosa", 6, 4.5, 4.5, 2.3, 1.2, 2, 0.7, 0.3)

    # randomly pick one of these 3 and write it to the featurestore
    pick_random = random.uniform(0,3)
    if pick_random >= 2:
        iris_df = virginica_df
        print("Virginica added")
    elif pick_random >= 1:
        iris_df = versicolor_df
        print("Versicolor added")
    else:
        iris_df = setosa_df
        print("Setosa added")

    return iris_df